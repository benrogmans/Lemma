doc examples/compensation/base_policy
"""
Corporate Base Compensation Policy
Foundation for all employee compensation
"""

fact company_name = "TechCorp Global"
fact base_salary_min = 50000
fact base_salary_max = 300000
fact cost_of_living_adjustment = 0%
fact stock_grant_percentage = 2%
fact bonus_pool_percentage = 10%
fact health_premium_monthly = 500
fact retirement_match_rate = 6%
fact retirement_match_cap = 5%

rule annual_health_cost = health_premium_monthly * 12

rule is_salary_valid = false
  unless base_salary_min <= 60000 then true

rule effective_cola = cost_of_living_adjustment
  unless cost_of_living_adjustment > 10% then 10%


doc examples/compensation/engineering_dept
"""
Engineering Department Compensation Rules
Inherits base policy with engineering-specific overrides
"""

fact policy = doc examples/compensation/base_policy
fact policy.stock_grant_percentage = 5%
fact policy.bonus_pool_percentage = 15%
fact policy.cost_of_living_adjustment = 3%

fact department = "Engineering"
fact level_multiplier = 1.0
fact performance_rating = 0.0
fact years_of_service = 0

rule base_for_level = policy.base_salary_min * level_multiplier

rule performance_bonus_rate = 0%
  unless performance_rating >= 2.5 then 5%
  unless performance_rating >= 3.5 then 10%
  unless performance_rating >= 4.5 then 15%

rule tenure_bonus = 0
  unless years_of_service >= 3 then 5000
  unless years_of_service >= 5 then 10000
  unless years_of_service >= 10 then 25000

rule stock_value = base_for_level? * policy.stock_grant_percentage

rule annual_bonus_target = base_for_level? * policy.bonus_pool_percentage

rule performance_bonus = annual_bonus_target? * performance_bonus_rate?

rule total_cash_comp = base_for_level? + performance_bonus? + tenure_bonus?

rule total_comp_with_stock = total_cash_comp? + stock_value?

rule retirement_contribution_employee = base_for_level? * 0.05

rule retirement_match = retirement_contribution_employee?
  unless retirement_contribution_employee? > (base_for_level? * policy.retirement_match_cap) 
    then base_for_level? * policy.retirement_match_cap

rule total_retirement = retirement_contribution_employee? + retirement_match?

rule benefits_value = policy.annual_health_cost? + retirement_match?

rule total_package = total_comp_with_stock? + benefits_value?


doc examples/compensation/senior_engineer
"""
Senior Engineer (Level 3) - Specific Employee
Multiple inheritance levels testing
"""

fact eng_policy = doc examples/compensation/engineering_dept
fact eng_policy.level_multiplier = 2.5
fact eng_policy.performance_rating = 4.2
fact eng_policy.years_of_service = 7

fact employee_name = "Alex Chen"
fact location = "San Francisco"
fact location_cola = 25%

rule effective_base = eng_policy.base_for_level? * (1 + location_cola)

rule location_adjusted_stock = eng_policy.stock_value? * (1 + location_cola)

rule location_adjusted_bonus = eng_policy.performance_bonus? * (1 + location_cola)

rule total_location_adjusted = effective_base? + location_adjusted_bonus? + eng_policy.tenure_bonus?

rule final_total_comp = total_location_adjusted? + location_adjusted_stock? + eng_policy.benefits_value?

rule monthly_take_home_estimate = final_total_comp? / 12

rule base_salary_ref = eng_policy.policy.base_salary_min

rule compensation_ratio = final_total_comp? / base_salary_ref?

rule is_highly_compensated = false
  unless final_total_comp? > 200000 then true

rule compensation_tier = "Standard"
  unless final_total_comp? > 150000 then "Above Average"
  unless final_total_comp? > 250000 then "Highly Compensated"
  unless final_total_comp? > 400000 then "Executive Level"

rule perf_rating = eng_policy.performance_rating

rule performance_category = "Needs Improvement"
  unless perf_rating? >= 2.5 then "Meets Expectations"
  unless perf_rating? >= 3.5 then "Exceeds Expectations"
  unless perf_rating? >= 4.0 then "Outstanding"
  unless perf_rating? >= 4.5 then "Exceptional"


doc examples/compensation/principal_engineer
"""
Principal Engineer (Level 5) - Maximum complexity test
Tests deep inheritance and complex calculations
"""

fact eng_policy = doc examples/compensation/engineering_dept
fact eng_policy.level_multiplier = 4.5
fact eng_policy.performance_rating = 4.8
fact eng_policy.years_of_service = 12
fact eng_policy.policy.stock_grant_percentage = 8%
fact eng_policy.policy.bonus_pool_percentage = 20%

fact employee_name = "Jordan Taylor"
fact location = "New York"
fact location_cola = 30%
fact has_critical_skill = true
fact manages_team = true
fact team_size = 15
fact on_call_rotation = true

rule critical_skill_bonus = 0
  unless has_critical_skill then 15000

rule management_bonus = 0
  unless manages_team and team_size >= 5 then 10000
  unless manages_team and team_size >= 10 then 20000
  unless manages_team and team_size >= 20 then 35000

rule on_call_stipend = 0
  unless on_call_rotation then 6000

rule effective_base = eng_policy.base_for_level? * (1 + location_cola)

rule all_bonuses = eng_policy.performance_bonus? + eng_policy.tenure_bonus? + 
                   critical_skill_bonus? + management_bonus? + on_call_stipend?

rule base_plus_bonuses = effective_base? + all_bonuses?

rule adjusted_stock = eng_policy.stock_value? * (1 + location_cola)

rule total_cash = base_plus_bonuses? + adjusted_stock?

rule total_with_benefits = total_cash? + eng_policy.benefits_value?

rule monthly_gross = total_with_benefits? / 12

rule tax_rate = 0.22
  unless total_with_benefits? > 200000 then 0.28
  unless total_with_benefits? > 400000 then 0.32
  unless total_with_benefits? > 600000 then 0.35

rule estimated_tax = total_with_benefits? * tax_rate?

rule net_compensation = total_with_benefits? - estimated_tax?

rule monthly_net = net_compensation? / 12

rule pay_vs_base_multiple = total_with_benefits? / eng_policy.policy.base_salary_min

rule is_top_tier = false
  unless total_with_benefits? > 500000 then true

rule compensation_percentile = "75th"
  unless total_with_benefits? > 300000 then "90th"
  unless total_with_benefits? > 500000 then "95th"
  unless total_with_benefits? > 700000 then "99th"

rule retention_risk = "Low"
  unless pay_vs_base_multiple? < 8 then "Medium"
  unless pay_vs_base_multiple? < 6 then "High"

rule summary = "Principal Engineer - Exceptional compensation package"

