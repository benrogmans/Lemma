name: Release

on:
  workflow_run:
    workflows: ["Quality"]
    types: [completed]
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  detect-version-changes:
    name: Detect Version Changes
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
      lemma_changed: ${{ steps.check.outputs.lemma_changed }}
      cli_changed: ${{ steps.check.outputs.cli_changed }}
      wasm_changed: ${{ steps.check.outputs.wasm_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version changes
        id: check
        run: |
          # Read version from workspace Cargo.toml (single source of truth)
          VERSION=$(grep '^\[workspace.package\]' -A 10 Cargo.toml | grep '^version = ' | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # For manual trigger, always consider changed
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "lemma_changed=true" >> $GITHUB_OUTPUT
            echo "cli_changed=true" >> $GITHUB_OUTPUT
            echo "wasm_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if workspace version changed
          if git diff HEAD^ HEAD -- Cargo.toml | grep -q '^+version = '; then
            echo "version_changed=true" >> $GITHUB_OUTPUT

            # Check individual component changes
            if git diff HEAD^ HEAD -- lemma/src/ lemma/Cargo.toml | grep -q .; then
              echo "lemma_changed=true" >> $GITHUB_OUTPUT
            else
              echo "lemma_changed=false" >> $GITHUB_OUTPUT
            fi

            if git diff HEAD^ HEAD -- cli/src/ cli/Cargo.toml | grep -q .; then
              echo "cli_changed=true" >> $GITHUB_OUTPUT
            else
              echo "cli_changed=false" >> $GITHUB_OUTPUT
            fi

            # WASM changes when lemma changes
            if git diff HEAD^ HEAD -- lemma/src/ lemma/Cargo.toml lemma/package.json | grep -q .; then
              echo "wasm_changed=true" >> $GITHUB_OUTPUT
            else
              echo "wasm_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "lemma_changed=false" >> $GITHUB_OUTPUT
            echo "cli_changed=false" >> $GITHUB_OUTPUT
            echo "wasm_changed=false" >> $GITHUB_OUTPUT
          fi

  release-lemma-engine:
    name: Release lemma-engine to crates.io
    needs: detect-version-changes
    if: needs.detect-version-changes.outputs.lemma_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests
        run: cargo nextest run -p lemma-engine --all-features

      - name: Publish to crates.io
        run: cargo publish -p lemma-engine --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Create tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag lemma-engine-v${{ needs.detect-version-changes.outputs.version }}
          git push origin lemma-engine-v${{ needs.detect-version-changes.outputs.version }}

  release-wasm:
    name: Release @benrogmans/lemma-engine to NPM
    needs: detect-version-changes
    if: needs.detect-version-changes.outputs.wasm_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM
        run: |
          cd lemma
          node wasm/build.js

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to NPM
        working-directory: lemma/pkg
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag wasm-v${{ needs.detect-version-changes.outputs.version }}
          git push origin wasm-v${{ needs.detect-version-changes.outputs.version }}

  release-cli:
    name: Release lemma-cli to crates.io
    needs: [detect-version-changes, release-lemma-engine]
    if: |
      always() &&
      needs.detect-version-changes.outputs.cli_changed == 'true' &&
      (needs.release-lemma-engine.result == 'success' || needs.release-lemma-engine.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests
        run: cargo nextest run --workspace --all-features

      - name: Publish CLI to crates.io
        run: cargo publish -p lemma-cli --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Build release binary
        run: cargo build --release -p lemma-cli

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: cli-v${{ needs.detect-version-changes.outputs.version }}
          name: Lemma CLI v${{ needs.detect-version-changes.outputs.version }}
          files: target/release/lemma
          body: |
            ## Installation

            Download the binary or install from source:

            ```bash
            cargo install lemma-cli@${{ needs.detect-version-changes.outputs.version }}
            ```

            Or use the library in your Rust project:

            ```bash
            cargo add lemma-engine@${{ needs.detect-version-changes.outputs.version }}
            ```

            Or use WebAssembly in your browser:

            ```bash
            npm install @benrogmans/lemma-engine@${{ needs.detect-version-changes.outputs.version }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}